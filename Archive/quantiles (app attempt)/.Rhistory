output$upload.plot = renderPlot({
# Plot --------------------------------------------------------------------
ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=y.axis.title, limits = y.axis.limits, oob = rescale_none) +
scale_x_continuous(name=x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(
panel.background = element_rect(fill = "white", color = "black"),
text = element_text(size = input$demo.font.size, family = "Times", color = "black")
)
}, height = 600, width = 600) #Close Render Plot
# Upload Data and Plot ----------------------------------------------------
})#Close server
shinyApp(ui = ui, server = server)
library(extrafont)
library(shiny)
library(ggplot2)
library(caret)
library(e1071)
library(formattable)
library(scales)
windowsFonts(Times=windowsFont("TT Times New Roman"))
ui <- shinyUI(navbarPage("Quantiles",
# START DEMO PAGE ---------------------------------------------------------
tabPanel("Demo",
fluidPage(
fluidRow(
column(width=2,
helpText(h5(strong("Sample data properties: "))),
sliderInput("demo.r",     label = h5("Correlation"), min = -1, max = 1, value = .50, step = .01),
numericInput("demo.quant", label = h5("Number Quantiles"), value = 5, step = 1),
#textInput("demo.plot.title", "Plot Title", "Mean Actual Criterion by Predicted Criterion Quantiles"),
textInput("demo.y.axis.title", "Y-Axis Title", "Mean Actual Criterion Score"),
textInput("demo.x.axis.title", "X-Axis Title", "Predicted Criterion Score Quantiles"),
numericInput("demo.y.axis.limit.lower", label = h5("Y-axis Lower Limit"), value = 40, step = 1),
numericInput("demo.y.axis.limit.upper", label = h5("Y-axis Upper Limit"), value = 60, step = 1),
numericInput("demo.font.size", label = h5("Font Size"), value = 20, step = 1),
br(),
h5(a("@AJThurston", href="https://twitter.com/AJThurston", target="_blank"), align = "center")
), #Closes sidebarPanel
column(width = 10, align = "center",
plotOutput("demo.plot")
)
) #Closes fluidRow
) #Closes fluidPage
),
# END DEMO PAGE ---------------------------------------------------------
# START UPLOAD PAGE ---------------------------------------------------------
tabPanel("Upload",
fluidPage(
fluidRow(
column(width=2,
helpText(h5(strong("Sample data properties: "))),
radioButtons("fileType_Input",label = h4("Choose File type"),choices = list(".csv/txt" = 1, ".xlsx" = 2), selected = 1, inline = TRUE),
fileInput('upload.data', h4('Upload Items List'), accept = c('text/csv','text/comma-separated-values,text/plain',
'.csv','.xlsx')),
numericInput("upload.quant", label = h5("Number Quantiles"), value = 5, step = 1),
textInput("upload.plot.title", "Plot Title", "Mean Actual Criterion by Predicted Criterion Quantiles"),
textInput("upload.y.axis.title", "Y-Axis Title", "Mean Actual Criterion Score"),
textInput("upload.x.axis.title", "X-Axis Title", "Predicted Criterion Score Quantiles"),
br(),
h2(a("@AJThurston", href="https://twitter.com/AJThurston", target="_blank"), align = "center")
),
column(width = 10, align = "center",
plotOutput("upload.plot")
)
)
)
),
# END UPLOAD PAGE ---------------------------------------------------------
# START DOCUMENTATION PAGE ---------------------------------------------------------
tabPanel("Documentation",
fluidPage(
fluidRow(
column(width=6,
p(strong("Formulas for values calculated on App page:")),
hr()
),
column(width=6,
p(strong("Contact: ")),
hr(),
h2(a("Website: AJThurston.com", href="https://AJThurston.com", target="_blank")),
br(),
h2(a("Twitter: @AJThurston", href="https://twitter.com/AJThurston", target="_blank")),
br(),
h2(a("LinkedIn: AJThurston", href="https://www.linkedin.com/in/ajthurston/", target="_blank")),
br(),
h2(a("Medium:  @AJThurston", href="https://medium.com/@AJThurston", target="_blank"))
)
)#Closes fluidRow
)#Closes fluidPage
) #Closes tabPanel
) #Closes ShinyUI
)
server <- shinyServer(function(input, output) {
output$demo.plot = renderPlot({
#Demo Data Properties
set.seed(33620) #Set seed so result is reproducable
n = 1000    #Sample size
M = 50      #Variable Means
SD = 10     #Variable SD
deci = 0    #Decimals to round data
#Plot Properties
y.axis.limit.low = 0
y.axis.limit.high = 50
y.axis.limits = c(y.axis.limit.low,y.axis.limit.high)
names = c("actu","pred")
nvars = length(names)
R = matrix(cbind(  1,input$demo.r,
input$demo.r,  1
),nrow=nvars)
#Choelsky Decomposition for Simulating Correlated Data
U = t(chol(R))
nvars = dim(U)[1]
random.normal = matrix(rnorm(nvars*n,0,1), nrow=nvars, ncol=n);
data = as.data.frame(t(U %*% random.normal))
data = round(data*SD+M, digits = deci)
names(data) = names
rm(U,R,random.normal,names,M,n,nvars,SD,deci)
data$quant <- as.numeric(cut(data$pred, quantile(data$pred, probs = seq(0,1,1/input$demo.quant)), include.lowest=TRUE))
means = aggregate(data, list(data$quant), mean)
means
# Simulated Plot --------------------------------------------------------------------
demo.plot = ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=input$demo.y.axis.title, limits = c(input$demo.y.axis.limit.lower,input$demo.y.axis.limit.upper) , oob = rescale_none) +
scale_x_continuous(name=input$demo.x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(text = element_text(size = 14, family = "Times"),
panel.background = element_rect(fill = "white", color = "black"),
axis.text.y = element_text(color = 'black'),
axis.text.x = element_text(color = 'black')
)
demo.plot}, height = 600, width = 600) #Close Render Plot
# Upload Data and Plot ----------------------------------------------------
get_item_list <- reactive({
uploaded.data <- input$upload.data
if (is.null(uploaded.data)) {
return(NULL) }
if (input$fileType_Input == "1") {
read.csv(uploaded.data$datapath,
header = TRUE,
stringsAsFactors = FALSE)
} else {
read.xlsx(uploaded.data$datapath,
header = TRUE,sheetIndex = 1,
stringsAsFactors = FALSE)
}
names = c("actu","pred")
nvars = length(names)
uploaded.data$quant <- as.numeric(cut(uploaded.data$pred, quantile(uploaded.data$pred, probs = seq(0,1,1/input$upload.quant)), include.lowest=TRUE))
means = aggregate(uploaded.data, list(upload.data$quant), mean)
means
})
output$upload.plot = renderPlot({
# Plot --------------------------------------------------------------------
ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=y.axis.title, limits = y.axis.limits, oob = rescale_none) +
scale_x_continuous(name=x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(
panel.background = element_rect(fill = "white", color = "black"),
element_text(size = input$demo.font.size, family = "Times", color = "black")
)
}, height = 600, width = 600) #Close Render Plot
# Upload Data and Plot ----------------------------------------------------
})#Close server
shinyApp(ui = ui, server = server)
library(extrafont)
library(shiny)
library(ggplot2)
library(caret)
library(e1071)
library(formattable)
library(scales)
windowsFonts(Times=windowsFont("TT Times New Roman"))
ui <- shinyUI(navbarPage("Quantiles",
# START DEMO PAGE ---------------------------------------------------------
tabPanel("Demo",
fluidPage(
fluidRow(
column(width=2,
helpText(h5(strong("Sample data properties: "))),
sliderInput("demo.r",     label = h5("Correlation"), min = -1, max = 1, value = .50, step = .01),
numericInput("demo.quant", label = h5("Number Quantiles"), value = 5, step = 1),
#textInput("demo.plot.title", "Plot Title", "Mean Actual Criterion by Predicted Criterion Quantiles"),
textInput("demo.y.axis.title", "Y-Axis Title", "Mean Actual Criterion Score"),
textInput("demo.x.axis.title", "X-Axis Title", "Predicted Criterion Score Quantiles"),
numericInput("demo.y.axis.limit.lower", label = h5("Y-axis Lower Limit"), value = 40, step = 1),
numericInput("demo.y.axis.limit.upper", label = h5("Y-axis Upper Limit"), value = 60, step = 1),
numericInput("demo.font.size", label = h5("Font Size"), value = 20, step = 1),
br(),
h5(a("@AJThurston", href="https://twitter.com/AJThurston", target="_blank"), align = "center")
), #Closes sidebarPanel
column(width = 10, align = "center",
plotOutput("demo.plot")
)
) #Closes fluidRow
) #Closes fluidPage
),
# END DEMO PAGE ---------------------------------------------------------
# START UPLOAD PAGE ---------------------------------------------------------
tabPanel("Upload",
fluidPage(
fluidRow(
column(width=2,
helpText(h5(strong("Sample data properties: "))),
radioButtons("fileType_Input",label = h4("Choose File type"),choices = list(".csv/txt" = 1, ".xlsx" = 2), selected = 1, inline = TRUE),
fileInput('upload.data', h4('Upload Items List'), accept = c('text/csv','text/comma-separated-values,text/plain',
'.csv','.xlsx')),
numericInput("upload.quant", label = h5("Number Quantiles"), value = 5, step = 1),
textInput("upload.plot.title", "Plot Title", "Mean Actual Criterion by Predicted Criterion Quantiles"),
textInput("upload.y.axis.title", "Y-Axis Title", "Mean Actual Criterion Score"),
textInput("upload.x.axis.title", "X-Axis Title", "Predicted Criterion Score Quantiles"),
br(),
h2(a("@AJThurston", href="https://twitter.com/AJThurston", target="_blank"), align = "center")
),
column(width = 10, align = "center",
plotOutput("upload.plot")
)
)
)
),
# END UPLOAD PAGE ---------------------------------------------------------
# START DOCUMENTATION PAGE ---------------------------------------------------------
tabPanel("Documentation",
fluidPage(
fluidRow(
column(width=6,
p(strong("Formulas for values calculated on App page:")),
hr()
),
column(width=6,
p(strong("Contact: ")),
hr(),
h2(a("Website: AJThurston.com", href="https://AJThurston.com", target="_blank")),
br(),
h2(a("Twitter: @AJThurston", href="https://twitter.com/AJThurston", target="_blank")),
br(),
h2(a("LinkedIn: AJThurston", href="https://www.linkedin.com/in/ajthurston/", target="_blank")),
br(),
h2(a("Medium:  @AJThurston", href="https://medium.com/@AJThurston", target="_blank"))
)
)#Closes fluidRow
)#Closes fluidPage
) #Closes tabPanel
) #Closes ShinyUI
)
server <- shinyServer(function(input, output) {
output$demo.plot = renderPlot({
#Demo Data Properties
set.seed(33620) #Set seed so result is reproducable
n = 1000    #Sample size
M = 50      #Variable Means
SD = 10     #Variable SD
deci = 0    #Decimals to round data
#Plot Properties
y.axis.limit.low = 0
y.axis.limit.high = 50
y.axis.limits = c(y.axis.limit.low,y.axis.limit.high)
names = c("actu","pred")
nvars = length(names)
R = matrix(cbind(  1,input$demo.r,
input$demo.r,  1
),nrow=nvars)
#Choelsky Decomposition for Simulating Correlated Data
U = t(chol(R))
nvars = dim(U)[1]
random.normal = matrix(rnorm(nvars*n,0,1), nrow=nvars, ncol=n);
data = as.data.frame(t(U %*% random.normal))
data = round(data*SD+M, digits = deci)
names(data) = names
rm(U,R,random.normal,names,M,n,nvars,SD,deci)
data$quant <- as.numeric(cut(data$pred, quantile(data$pred, probs = seq(0,1,1/input$demo.quant)), include.lowest=TRUE))
means = aggregate(data, list(data$quant), mean)
means
# Simulated Plot --------------------------------------------------------------------
demo.plot = ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=input$demo.y.axis.title, limits = c(input$demo.y.axis.limit.lower,input$demo.y.axis.limit.upper) , oob = rescale_none) +
scale_x_continuous(name=input$demo.x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(text = element_text(size = 14, family = "Times"),
panel.background = element_rect(fill = "white", color = "black"),
axis.text.y = element_text(color = 'black'),
axis.text.x = element_text(color = 'black')
)
demo.plot}, height = 600, width = 600) #Close Render Plot
# Upload Data and Plot ----------------------------------------------------
get_item_list <- reactive({
uploaded.data <- input$upload.data
if (is.null(uploaded.data)) {
return(NULL) }
if (input$fileType_Input == "1") {
read.csv(uploaded.data$datapath,
header = TRUE,
stringsAsFactors = FALSE)
} else {
read.xlsx(uploaded.data$datapath,
header = TRUE,sheetIndex = 1,
stringsAsFactors = FALSE)
}
names = c("actu","pred")
nvars = length(names)
uploaded.data$quant <- as.numeric(cut(uploaded.data$pred, quantile(uploaded.data$pred, probs = seq(0,1,1/input$upload.quant)), include.lowest=TRUE))
means = aggregate(uploaded.data, list(upload.data$quant), mean)
means
})
output$upload.plot = renderPlot({
# Plot --------------------------------------------------------------------
ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=y.axis.title, limits = y.axis.limits, oob = rescale_none) +
scale_x_continuous(name=x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(
panel.background = element_rect(fill = "white", color = "black"),
axis.text.y = element_text(size = input$demo.font.size, family = "Times", color = "black")
)
}, height = 600, width = 600) #Close Render Plot
# Upload Data and Plot ----------------------------------------------------
})#Close server
shinyApp(ui = ui, server = server)
ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=y.axis.title, limits = y.axis.limits, oob = rescale_none) +
scale_x_continuous(name=x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(
panel.background = element_rect(fill = "white", color = "black"),
text = element_text(size = input$demo.font.size, family = "Times", color = "black")
)
library(extrafont)
library(shiny)
library(ggplot2)
library(caret)
library(e1071)
library(formattable)
library(scales)
windowsFonts(Times=windowsFont("TT Times New Roman"))
ui <- shinyUI(navbarPage("Quantiles",
# START DEMO PAGE ---------------------------------------------------------
tabPanel("Demo",
fluidPage(
fluidRow(
column(width=2,
helpText(h5(strong("Sample data properties: "))),
sliderInput("demo.r",     label = h5("Correlation"), min = -1, max = 1, value = .50, step = .01),
numericInput("demo.quant", label = h5("Number Quantiles"), value = 5, step = 1),
#textInput("demo.plot.title", "Plot Title", "Mean Actual Criterion by Predicted Criterion Quantiles"),
textInput("demo.y.axis.title", "Y-Axis Title", "Mean Actual Criterion Score"),
textInput("demo.x.axis.title", "X-Axis Title", "Predicted Criterion Score Quantiles"),
numericInput("demo.y.axis.limit.lower", label = h5("Y-axis Lower Limit"), value = 40, step = 1),
numericInput("demo.y.axis.limit.upper", label = h5("Y-axis Upper Limit"), value = 60, step = 1),
numericInput("demo.font.size", label = h5("Font Size"), value = 20, step = 1),
br(),
h5(a("@AJThurston", href="https://twitter.com/AJThurston", target="_blank"), align = "center")
), #Closes sidebarPanel
column(width = 10, align = "center",
plotOutput("demo.plot")
)
) #Closes fluidRow
) #Closes fluidPage
),
# END DEMO PAGE ---------------------------------------------------------
# START UPLOAD PAGE ---------------------------------------------------------
tabPanel("Upload",
fluidPage(
fluidRow(
column(width=2,
helpText(h5(strong("Sample data properties: "))),
radioButtons("fileType_Input",label = h4("Choose File type"),choices = list(".csv/txt" = 1, ".xlsx" = 2), selected = 1, inline = TRUE),
fileInput('upload.data', h4('Upload Items List'), accept = c('text/csv','text/comma-separated-values,text/plain',
'.csv','.xlsx')),
numericInput("upload.quant", label = h5("Number Quantiles"), value = 5, step = 1),
textInput("upload.plot.title", "Plot Title", "Mean Actual Criterion by Predicted Criterion Quantiles"),
textInput("upload.y.axis.title", "Y-Axis Title", "Mean Actual Criterion Score"),
textInput("upload.x.axis.title", "X-Axis Title", "Predicted Criterion Score Quantiles"),
br(),
h2(a("@AJThurston", href="https://twitter.com/AJThurston", target="_blank"), align = "center")
),
column(width = 10, align = "center",
plotOutput("upload.plot")
)
)
)
),
# END UPLOAD PAGE ---------------------------------------------------------
# START DOCUMENTATION PAGE ---------------------------------------------------------
tabPanel("Documentation",
fluidPage(
fluidRow(
column(width=6,
p(strong("Formulas for values calculated on App page:")),
hr()
),
column(width=6,
p(strong("Contact: ")),
hr(),
h2(a("Website: AJThurston.com", href="https://AJThurston.com", target="_blank")),
br(),
h2(a("Twitter: @AJThurston", href="https://twitter.com/AJThurston", target="_blank")),
br(),
h2(a("LinkedIn: AJThurston", href="https://www.linkedin.com/in/ajthurston/", target="_blank")),
br(),
h2(a("Medium:  @AJThurston", href="https://medium.com/@AJThurston", target="_blank"))
)
)#Closes fluidRow
)#Closes fluidPage
) #Closes tabPanel
) #Closes ShinyUI
)
server <- shinyServer(function(input, output) {
output$demo.plot = renderPlot({
#Demo Data Properties
set.seed(33620) #Set seed so result is reproducable
n = 1000    #Sample size
M = 50      #Variable Means
SD = 10     #Variable SD
deci = 0    #Decimals to round data
#Plot Properties
y.axis.limit.low = 0
y.axis.limit.high = 50
y.axis.limits = c(y.axis.limit.low,y.axis.limit.high)
names = c("actu","pred")
nvars = length(names)
R = matrix(cbind(  1,input$demo.r,
input$demo.r,  1
),nrow=nvars)
#Choelsky Decomposition for Simulating Correlated Data
U = t(chol(R))
nvars = dim(U)[1]
random.normal = matrix(rnorm(nvars*n,0,1), nrow=nvars, ncol=n);
data = as.data.frame(t(U %*% random.normal))
data = round(data*SD+M, digits = deci)
names(data) = names
rm(U,R,random.normal,names,M,n,nvars,SD,deci)
data$quant <- as.numeric(cut(data$pred, quantile(data$pred, probs = seq(0,1,1/input$demo.quant)), include.lowest=TRUE))
means = aggregate(data, list(data$quant), mean)
means
# Simulated Plot --------------------------------------------------------------------
demo.plot = ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=input$demo.y.axis.title, limits = c(input$demo.y.axis.limit.lower,input$demo.y.axis.limit.upper) , oob = rescale_none) +
scale_x_continuous(name=input$demo.x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(
panel.background = element_rect(fill = "white", color = "black"),
text = element_text(size = input$demo.font.size, family = "Times", color = "black")
)
demo.plot}, height = 600, width = 600) #Close Render Plot
# Upload Data and Plot ----------------------------------------------------
get_item_list <- reactive({
uploaded.data <- input$upload.data
if (is.null(uploaded.data)) {
return(NULL) }
if (input$fileType_Input == "1") {
read.csv(uploaded.data$datapath,
header = TRUE,
stringsAsFactors = FALSE)
} else {
read.xlsx(uploaded.data$datapath,
header = TRUE,sheetIndex = 1,
stringsAsFactors = FALSE)
}
names = c("actu","pred")
nvars = length(names)
uploaded.data$quant <- as.numeric(cut(uploaded.data$pred, quantile(uploaded.data$pred, probs = seq(0,1,1/input$upload.quant)), include.lowest=TRUE))
means = aggregate(uploaded.data, list(upload.data$quant), mean)
means
})
output$upload.plot = renderPlot({
# Plot --------------------------------------------------------------------
ggplot(data) +
#labs(title = "Mean Actual Criterion Score by Predicted Criterion Quartiles") +
scale_y_continuous(name=y.axis.title, limits = y.axis.limits, oob = rescale_none) +
scale_x_continuous(name=x.axis.title, oob = rescale_none) +
geom_bar(aes(x = quant, y = actu), position = "dodge", stat = "summary", fun.y = "mean",
color = 'black',
fill = '#006747',
width = .5) +
theme(
panel.background = element_rect(fill = "white", color = "black"),
text = element_text(size = input$demo.font.size, family = "Times", color = "black")
)
}, height = 600, width = 600) #Close Render Plot
# Upload Data and Plot ----------------------------------------------------
})#Close server
shinyApp(ui = ui, server = server)
